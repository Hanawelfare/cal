/* === Configuration (‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°) === */
const SS = SpreadsheetApp.getActiveSpreadsheet();
const FOLDER_ID = '1gdhwPImCCN5EKW4NeX-6EcBC1nFeF1q5'; // ‚òÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Drive folder id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ
const MASTER_SHEET_NAME = 'Master Data'; // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
/* ============================================ */

/* doGet ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ?page=admin ‡πÅ‡∏•‡∏∞ ?page=leaderboard */
function doGet(e) {
  const page = e && e.parameter && e.parameter.page;
  if (page === 'admin') {
    return HtmlService.createTemplateFromFile('admin').evaluate().setTitle('Admin Approval');
  }
  if (page === 'leaderboard') {
    return HtmlService.createTemplateFromFile('leaderboard').evaluate().setTitle('Leaderboard');
  }
  return HtmlService.createTemplateFromFile('index').evaluate().setTitle('Step Challenge');
}

function include(filename) { return HtmlService.createHtmlOutputFromFile(filename).getContent(); }

/* ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Master Data */
function getEmployeeData(employeeId) {
  const masterSheet = SS.getSheetByName(MASTER_SHEET_NAME);
  if (!masterSheet) return { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Master Data' };
  const data = masterSheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (String(data[i][0]) === String(employeeId)) {
      return { name: data[i][1], department: data[i][2] };
    }
  }
  return { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' };
}

/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï Settings : key=submissionOpen) */
function isSubmissionOpen() {
  const settingSheet = SS.getSheetByName('Settings');
  if (!settingSheet) return true;
  const data = settingSheet.getRange(1, 1, settingSheet.getLastRow(), 2).getValues();
  for (let i = 0; i < data.length; i++) {
    if (String(data[i][0]).toLowerCase() === 'submissionopen') {
      return String(data[i][1]).toLowerCase() === 'true';
    }
  }
  return true;
}

/* ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‚Äî ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ */
function submitData(formData) {
  if (!isSubmissionOpen()) {
    return { success: false, message: 'üö´ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß' };
  }

  const dataSheet = SS.getSheetByName('Data');
  if (!dataSheet) return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Data' };

  const emp = getEmployeeData(formData.employeeId);
  if (emp.error) return { success: false, message: emp.error };

  try {
    const folder = DriveApp.getFolderById(FOLDER_ID);
    const decoded = Utilities.base64Decode(formData.proofBase64);
    const blob = Utilities.newBlob(decoded, formData.mimeType || 'image/png', `proof_${Date.now()}.png`);
    const file = folder.createFile(blob);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ó‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ó‡πâ‡∏≤‡∏¢)
    const lastCol = dataSheet.getLastColumn();
    if (lastCol < 7) {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
      // ‡πÅ‡∏ï‡πà‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
    }

    dataSheet.appendRow([
      new Date(),
      "'" + formData.employeeId,
      emp.name,
      emp.department,
      parseInt(formData.steps, 10),
      file.getUrl(),
      "‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    ]);

    return { success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)' };
  } catch (err) {
    return { success: false, message: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + err };
  }
}

/* ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚Äî ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á object (‡∏°‡∏µ row index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ) */
function getPendingSubmissions() {
  const dataSheet = SS.getSheetByName('Data');
  if (!dataSheet) {
    Logger.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï Data');
    return [];
  }

  const values = dataSheet.getDataRange().getValues();
  Logger.log('üßæ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' + values.length);

  const pending = [];
  for (let i = 1; i < values.length; i++) {
    const row = values[i];
    const status = String(row[6]).trim();
    Logger.log(`‡πÅ‡∏ñ‡∏ß ${i + 1} ‚Üí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status}`);

    if (status.includes('‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')) {
      Logger.log(`‚úÖ ‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${row[1]} ${row[2]}`);
      pending.push({
        row: i + 1,
        date: row[0],
        id: row[1],
        name: row[2],
        dept: row[3],
        steps: row[4],
        proof: row[5]
      });
    }
  }

  Logger.log('üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' + pending.length);
  return pending;
}



/* ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏î‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥) */
function updateApproval(row, approved) {
  const dataSheet = SS.getSheetByName('Data');
  if (!dataSheet) return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó Data' };
  const newStatus = approved ? '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥';
  dataSheet.getRange(row, 7).setValue(newStatus); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 7 = G
  return { success: true };
}

/* ‡∏™‡∏£‡πâ‡∏≤‡∏á Leaderboard ‡∏à‡∏≤‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ = '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' */
function getLeaderboard() {
  const dataSheet = SS.getSheetByName('Data');
  const masterSheet = SS.getSheetByName(MASTER_SHEET_NAME);
  if (!dataSheet || dataSheet.getLastRow() < 2 || !masterSheet) return [];

  const values = dataSheet.getRange(2, 1, dataSheet.getLastRow() - 1, dataSheet.getLastColumn()).getValues();
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á lookup ‡∏à‡∏≤‡∏Å master
  const masterData = masterSheet.getDataRange().getValues();
  const lookup = {};
  for (let i = 1; i < masterData.length; i++) {
    lookup[String(masterData[i][0])] = { name: masterData[i][1], dept: masterData[i][2] };
  }

  const total = {};
  const todaySteps = {};
  const todayStr = new Date().toDateString();

  values.forEach(r => {
    const status = r[6]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (status !== '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß') return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    const id = String(r[1]);
    const steps = Number(r[4]) || 0;
    const date = new Date(r[0]).toDateString();

    if (!total[id]) total[id] = { steps: 0, score: 0 };
    total[id].steps += steps;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏£‡∏ó‡πÄ‡∏î‡∏¥‡∏°
    if (steps >= 10000) total[id].score += 8;
    else if (steps >= 6500) total[id].score += 5;
    else if (steps >= 5200) total[id].score += 2;
    else if (steps >= 1) total[id].score += 1;

    if (date === todayStr) {
      if (!todaySteps[id]) todaySteps[id] = 0;
      todaySteps[id] += steps;
    }
  });

  const arr = Object.keys(total).map(id => ({
    id,
    name: lookup[id]?.name || 'N/A',
    dept: lookup[id]?.dept || 'N/A',
    steps: total[id].steps,
    score: total[id].score,
    today: todaySteps[id] || 0
  })).sort((a, b) => b.steps - a.steps);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á rank
  const result = arr.map((r, i) => ({
    rank: i + 1,
    id: r.id,
    name: r.name,
    dept: r.dept,
    steps: r.steps,
    score: r.score,
    today: r.today
  }));

  return result;
}

/* ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ index) */
function getEmployeeSummary(employeeId) {
  const board = getLeaderboard();
  for (let i = 0; i < board.length; i++) {
    if (String(board[i].id) === String(employeeId)) {
      return {
        found: true,
        rank: board[i].rank,
        steps: board[i].steps,
        score: board[i].score
      };
    }
  }
  return { found: false, message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ' };
}
